# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    branches:
      - trunk
  workflow_dispatch:

env:
  VERSION: '0.2.4'
  RELEASE: 'Beta'


jobs:
  build-packages:
      
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '18'
        distribution: 'corretto'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Set ROOT_DIR environment variable
      run: echo "ROOT_DIR=$(pwd)" >> $GITHUB_ENV
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle
      run: ./gradlew shadowJar

    - name: Build Server
      run: ./gradlew :Server:shadowJar

    - name: Build Client for Windows
      run: |
        java -jar $(pwd)/jre/packr.jar \
          --platform windows \
          --jdk $(pwd)/jre/windows \
          --executable Drifter \
          --classpath $(pwd)/build/libs/Drifter.jar \
          --main-class ca.volatilecobra.Drifter \
          --output $(pwd)/build/binaries/windows-${{ env.VERSION }}-${{ env.RELEASE }}
    - name: Build Client for Linux
      run: |
        java -jar $(pwd)/packr.jar \
          --platform linux64 \
          --jdk $(pwd)/jre/linux \
          --executable Drifter \
          --classpath $(pwd)/build/libs/Drifter.jar \
          --main-class ca.volatilecobra.Drifter \
          --output $(pwd)/build/binaries/linux-${{ env.VERSION }}-${{ env.RELEASE }}
    
    - name: Zip Clients
      run: |
        chmod +x $(pwd)/build/binaries/linux-${{ env.VERSION }}-${{ env.RELEASE }}/Drifter
        tar -czvf $(pwd)/build/binaries/Drifter-${{ env.VERSION }}-${{ env.RELEASE }}_linux.tar.gz -C $(pwd)/build/binaries/linux-{{ env.VERSION }}-{{ env.RELEASE }}
        zip -r $(pwd)/build/binaries/Drifter-${{ env.VERSION }}-${{ env.RELEASE }}_windows.zip $(pwd)/build/binaries/windows-{{ env.VERSION }}-{{ env.RELEASE }}
    
    - name: Test Linux client
      run: |
        cd $(pwd)/build/binaries/linux-{{ env.VERSION }}-{{ env.RELEASE }}
        ./Drifter
      continue-on-error: true
    - name: Reset root dir
      run: cd ${{ env.ROOT_DIR }}
      
    # windows client testing is currently broken, im just assuming its working because I havent had any issues with it in the past - VolatileCobra77
    #- name: Test Windows Client
    #  run: |
    #    cd ${{ env.ROOT_DIR}}/build/binaries/windows-{{ env.VERSION }}-{{ env.RELEASE }}
    - name: Upload Packaged Application
      uses: actions/upload-artifact@v3
      with:
        name: drifter-all
        path: |
          $(pwd)/build/lib/Drifter-Drifter-${{ env.VERSION }}-${{ env.RELEASE_TYPE }}.jar
          $(pwd)/build/binaries/Drifter-${{ env.VERSION }}-${{ env.RELEASE_TYPE }}_linux.tar.gz
          $(pwd)/build/binaries/Drifter-${{ env.VERSION }}-${{ env.RELEASE_TYPE }}_windows.zip   
  manual-approval:
    runs-on: ubuntu-latest
    needs: build-packages

    steps:
    - name: Manual Approval
      uses: peter-evans/slash-command-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commands: approve
        issue-type: issue
  publish-release:
      runs-on: ubuntu-latest
      needs: manual-approval
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Download Packaged Application
          uses: actions/download-artifact@v3
          with:
            name: drifter-all
            path: .
        - name: Create GitHub Release
          id: create_release
          uses: actions/create-release@v1
          with:
            tag_name: ${{ env.RELEASE_TYPE }}-${{ env.VERSION }} # Adjust versioning as needed
            release_name: Drifter ${{ env.VERSION }}-${{ env.RELEASE_TYPE }}
            body_path: ${{ env.ROOT_DIR }}/build/binaries/release-notes.txt
            draft: true
            prerelease: false
            token: ${{ secrets.GITHUB_TOKEN }}
    
        - name: Upload Release Assets
          uses: actions/upload-release-asset@v1
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: |
              Drifter-${{ env.VERSION }}-${{ env.RELEASE_TYPE }}_linux.tar.gz
              Drifter-${{ env.VERSION }}-${{ env.RELEASE_TYPE }}_windows.zip
            asset_name: |
              Drifter-${{ env.VERSION }}-${{ env.RELEASE_TYPE }}_linux.tar.gz
              Drifter-${{ env.VERSION }}-${{ env.RELEASE_TYPE }})_windows.zip
            asset_content_type: application/octet-stream
    
        - name: Publish GitHub Release
          run: |
            gh release edit ${{ steps.create_release.outputs.id }} --draft=false
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
